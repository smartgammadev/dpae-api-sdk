<?php
/**
 * Upload.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DPAE.
 *
 * Connection of Troops & DPAE
 *
 * OpenAPI spec version: 1.0.0-oas3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DPAE\Model;

use ArrayAccess;
use DPAE\ObjectSerializer;

/**
 * Upload Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Upload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Upload';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'xmlnscct' => 'string',
'xmlnsrxdt' => 'string',
'xmlnsrxorg' => 'string',
'xmlnsrxpadr' => 'string',
'xmlnsrxpers' => 'string',
'xmlnsrxphadr' => 'string',
'xmlnsxsi' => 'string',
'indicator' => 'int',
'duesGroup' => '\DPAE\Model\DuesGroup',    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'xmlnscct' => null,
'xmlnsrxdt' => null,
'xmlnsrxorg' => null,
'xmlnsrxpadr' => null,
'xmlnsrxpers' => null,
'xmlnsrxphadr' => null,
'xmlnsxsi' => null,
'indicator' => null,
'duesGroup' => null,    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'xmlnscct' => 'xmlns:cct',
'xmlnsrxdt' => 'xmlns:rxdt',
'xmlnsrxorg' => 'xmlns:rxorg',
'xmlnsrxpadr' => 'xmlns:rxpadr',
'xmlnsrxpers' => 'xmlns:rxpers',
'xmlnsrxphadr' => 'xmlns:rxphadr',
'xmlnsxsi' => 'xmlns:xsi',
'indicator' => 'indicator',
'duesGroup' => 'duesGroup',    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'xmlnscct' => 'setXmlnscct',
'xmlnsrxdt' => 'setXmlnsrxdt',
'xmlnsrxorg' => 'setXmlnsrxorg',
'xmlnsrxpadr' => 'setXmlnsrxpadr',
'xmlnsrxpers' => 'setXmlnsrxpers',
'xmlnsrxphadr' => 'setXmlnsrxphadr',
'xmlnsxsi' => 'setXmlnsxsi',
'indicator' => 'setIndicator',
'duesGroup' => 'setDuesGroup',    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'xmlnscct' => 'getXmlnscct',
'xmlnsrxdt' => 'getXmlnsrxdt',
'xmlnsrxorg' => 'getXmlnsrxorg',
'xmlnsrxpadr' => 'getXmlnsrxpadr',
'xmlnsrxpers' => 'getXmlnsrxpers',
'xmlnsrxphadr' => 'getXmlnsrxphadr',
'xmlnsxsi' => 'getXmlnsxsi',
'indicator' => 'getIndicator',
'duesGroup' => 'getDuesGroup',    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['xmlnscct'] = isset($data['xmlnscct']) ? $data['xmlnscct'] : null;
        $this->container['xmlnsrxdt'] = isset($data['xmlnsrxdt']) ? $data['xmlnsrxdt'] : null;
        $this->container['xmlnsrxorg'] = isset($data['xmlnsrxorg']) ? $data['xmlnsrxorg'] : null;
        $this->container['xmlnsrxpadr'] = isset($data['xmlnsrxpadr']) ? $data['xmlnsrxpadr'] : null;
        $this->container['xmlnsrxpers'] = isset($data['xmlnsrxpers']) ? $data['xmlnsrxpers'] : null;
        $this->container['xmlnsrxphadr'] = isset($data['xmlnsrxphadr']) ? $data['xmlnsrxphadr'] : null;
        $this->container['xmlnsxsi'] = isset($data['xmlnsxsi']) ? $data['xmlnsxsi'] : null;
        $this->container['indicator'] = isset($data['indicator']) ? $data['indicator'] : null;
        $this->container['duesGroup'] = isset($data['duesGroup']) ? $data['duesGroup'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets xmlnscct.
     *
     * @return string
     */
    public function getXmlnscct()
    {
        return $this->container['xmlnscct'];
    }

    /**
     * Sets xmlnscct.
     *
     * @param string $xmlnscct xmlnscct
     *
     * @return $this
     */
    public function setXmlnscct($xmlnscct)
    {
        $this->container['xmlnscct'] = $xmlnscct;

        return $this;
    }

    /**
     * Gets xmlnsrxdt.
     *
     * @return string
     */
    public function getXmlnsrxdt()
    {
        return $this->container['xmlnsrxdt'];
    }

    /**
     * Sets xmlnsrxdt.
     *
     * @param string $xmlnsrxdt xmlnsrxdt
     *
     * @return $this
     */
    public function setXmlnsrxdt($xmlnsrxdt)
    {
        $this->container['xmlnsrxdt'] = $xmlnsrxdt;

        return $this;
    }

    /**
     * Gets xmlnsrxorg.
     *
     * @return string
     */
    public function getXmlnsrxorg()
    {
        return $this->container['xmlnsrxorg'];
    }

    /**
     * Sets xmlnsrxorg.
     *
     * @param string $xmlnsrxorg xmlnsrxorg
     *
     * @return $this
     */
    public function setXmlnsrxorg($xmlnsrxorg)
    {
        $this->container['xmlnsrxorg'] = $xmlnsrxorg;

        return $this;
    }

    /**
     * Gets xmlnsrxpadr.
     *
     * @return string
     */
    public function getXmlnsrxpadr()
    {
        return $this->container['xmlnsrxpadr'];
    }

    /**
     * Sets xmlnsrxpadr.
     *
     * @param string $xmlnsrxpadr xmlnsrxpadr
     *
     * @return $this
     */
    public function setXmlnsrxpadr($xmlnsrxpadr)
    {
        $this->container['xmlnsrxpadr'] = $xmlnsrxpadr;

        return $this;
    }

    /**
     * Gets xmlnsrxpers.
     *
     * @return string
     */
    public function getXmlnsrxpers()
    {
        return $this->container['xmlnsrxpers'];
    }

    /**
     * Sets xmlnsrxpers.
     *
     * @param string $xmlnsrxpers xmlnsrxpers
     *
     * @return $this
     */
    public function setXmlnsrxpers($xmlnsrxpers)
    {
        $this->container['xmlnsrxpers'] = $xmlnsrxpers;

        return $this;
    }

    /**
     * Gets xmlnsrxphadr.
     *
     * @return string
     */
    public function getXmlnsrxphadr()
    {
        return $this->container['xmlnsrxphadr'];
    }

    /**
     * Sets xmlnsrxphadr.
     *
     * @param string $xmlnsrxphadr xmlnsrxphadr
     *
     * @return $this
     */
    public function setXmlnsrxphadr($xmlnsrxphadr)
    {
        $this->container['xmlnsrxphadr'] = $xmlnsrxphadr;

        return $this;
    }

    /**
     * Gets xmlnsxsi.
     *
     * @return string
     */
    public function getXmlnsxsi()
    {
        return $this->container['xmlnsxsi'];
    }

    /**
     * Sets xmlnsxsi.
     *
     * @param string $xmlnsxsi xmlnsxsi
     *
     * @return $this
     */
    public function setXmlnsxsi($xmlnsxsi)
    {
        $this->container['xmlnsxsi'] = $xmlnsxsi;

        return $this;
    }

    /**
     * Gets indicator.
     *
     * @return int
     */
    public function getIndicator()
    {
        return $this->container['indicator'];
    }

    /**
     * Sets indicator.
     *
     * @param int $indicator indicator
     *
     * @return $this
     */
    public function setIndicator($indicator)
    {
        $this->container['indicator'] = $indicator;

        return $this;
    }

    /**
     * Gets duesGroup.
     *
     * @return \DPAE\Model\DuesGroup
     */
    public function getDuesGroup()
    {
        return $this->container['duesGroup'];
    }

    /**
     * Sets duesGroup.
     *
     * @param \DPAE\Model\DuesGroup $duesGroup duesGroup
     *
     * @return $this
     */
    public function setDuesGroup($duesGroup)
    {
        $this->container['duesGroup'] = $duesGroup;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
